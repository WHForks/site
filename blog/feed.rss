<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>purplesyringa's blog</title>
		<link>https://purplesyringa.moe/blog/</link>
		<description>Posts from purplesyringa's blog.</description>
		<copyright>Alisa Sireneva, CC BY</copyright>
		<managingEditor>me@purplesyringa.moe (Alisa Sireneva)</managingEditor>
		<webMaster>me@purplesyringa.moe (Alisa Sireneva)</webMaster>
		<lastBuildDate>Tue, 13 Aug 2024 13:45:53 GMT</lastBuildDate>
		<docs>https://www.rssboard.org/rss-specification</docs>
		<ttl>60</ttl>
		<atom:link href="https://purplesyringa.moe/blog/feed.rss" rel="self" type="application/rss+xml" />
		
			<item>
				<title>The sentinel trick</title>
				<link>https://purplesyringa.moe/blog/./the-sentinel-trick/</link>
				<description>The sentinel trick underlies a data structure with the following requirements:

Read element by index in O ( 1 ) ,
Write element by index in O ( 1 ) ,
Replace all elements with a given value in O ( 1 ) .

It is not a novel technique by any means, but it doesn’t seem on everyone’s lips, so some of you might find it interesting.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/./the-sentinel-trick/</guid>
				<pubDate>Tue, 13 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>You might want to use panics for error handling</title>
				<link>https://purplesyringa.moe/blog/./you-might-want-to-use-panics-for-error-handling/</link>
				<description>Rust’s approach to error handling comes at a cost. The Result type often doesn’t fit in CPU registers, and callers of fallible functions have to check whether the returned value is Ok or Err. That’s a stack spill, a comparison, a branch, and a lot of error handling code intertwined with the hot path that just shouldn’t be here, which inhibits inlining, the most important optimization of all.
Exceptions and panics make it easy to forget about the occasional error, but they don’t suffer from inefficiency. Throwing an exception unwinds the stack automatically, without any cooperation from the functions except the one that throws the exception and the one that catches it. Wouldn’t it be neat if a mechanism with the performance of panic! and the ergonomics of Result existed?</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/./you-might-want-to-use-panics-for-error-handling/</guid>
				<pubDate>Tue, 13 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>У base64 есть неподвижная точка</title>
				<link>https://purplesyringa.moe/blog/ru/base64-has-a-fixed-point/</link>
				<description>$ base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | head -1
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVmpBeFYySkVU

$ base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 | base64 \
| base64 | head -1
Vm0wd2QyUXlVWGxWV0d4V1YwZDRWMVl3WkRSV01WbDNXa1JTVjAxV2JETlhhMUpUVmpBeFYySkVU</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/ru/base64-has-a-fixed-point/</guid>
				<pubDate>Sat, 03 Aug 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>I thought I was smart enough to play with fire</title>
				<link>https://purplesyringa.moe/blog/./i-thought-i-was-smart-enough-to-play-with-fire/</link>
				<description>blazingio cuts corners by design. It keeps the constant factor small and uses long forgotten algorithms people used before processors supported SIMD and integer division. But another limitation made this task much harder.
Size.
Professional libraries start exceeding the Codeforces limit of 64 KiB really fast. Code minification barely helps, and neither does resorting to ugly code. So I cut a corner I don’t typically cut.
Undefined Behavior.
These two words make a seasoned programmer shudder. But sidestepping UB increases code size so much the library can hardly be used on CF. So I took a gamble. I meticulously scanned every instance of UB I used intentionally and made sure the compiler had absolutely no reason to miscompile it. I wrote excessive tests and run them on CI on all architecture and OS combinations I could think of. I released the library without so much as a flaw. It worked like clockwork.
And then, 3 months later, I updated README, and all hell broke loose.</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/./i-thought-i-was-smart-enough-to-play-with-fire/</guid>
				<pubDate>Thu, 20 Jun 2024 00:00:00 GMT</pubDate>
			</item>
		
			<item>
				<title>Recovering garbled Bitcoin addresses</title>
				<link>https://purplesyringa.moe/blog/./recovering-garbled-bitcoin-addresses/</link>
				<description>ZeroNet is a decentralized network that enables dynamic sites, such as blogs and forums, unlike popular content-addressed storage networks that came later. Sites aren’t addressed by immutable hashes; instead, site updates are signed by Bitcoin addresses.
A moot point is that Bitcoin addresses are case-sensitive, and people are used to addresses being case-insensitive. Mistakes happen, and sometimes the only trail you have is a lower-cased address, like 1lbcfr7sahtd9cgdqo3htmtkv8lk4znx71.
Losing valuable information is a bad thing when you’re an archivist. Have we really lost access to the site if we only know the lower-cased address? Can we recover the original address somehow?</description>
				<author>me@purplesyringa.moe (Alisa Sireneva)</author>
				
				<guid>https://purplesyringa.moe/blog/./recovering-garbled-bitcoin-addresses/</guid>
				<pubDate>Tue, 23 Apr 2024 00:00:00 GMT</pubDate>
			</item>
		
	</channel>
</rss>